# Delete the `cars` index
DELETE /cars

# Index example docs
POST /cars/_bulk
{ "index": {}}
{ "price" : 10000, "color" : "red", "make" : "honda", "sold" : "2014-10-28" }
{ "index": {}}
{ "price" : 20000, "color" : "red", "make" : "honda", "sold" : "2014-11-05" }
{ "index": {}}
{ "price" : 30000, "color" : "green", "make" : "ford", "sold" : "2014-05-18" }
{ "index": {}}
{ "price" : 15000, "color" : "blue", "make" : "toyota", "sold" : "2014-07-02" }
{ "index": {}}
{ "price" : 12000, "color" : "green", "make" : "toyota", "sold" : "2014-08-19" }
{ "index": {}}
{ "price" : 20000, "color" : "red", "make" : "honda", "sold" : "2014-11-05" }
{ "index": {}}
{ "price" : 80000, "color" : "red", "make" : "bmw", "sold" : "2014-01-01" }
{ "index": {}}
{ "price" : 25000, "color" : "blue", "make" : "ford", "sold" : "2014-02-12" }

# Basic aggregation - most popular car colors
# Size zero will just remove the list of docs appearing in the result
GET /cars/_search
{
    "size" : 0,
    "aggs" : {
        "popular_colors" : {
            "terms" : {
              "field" : "color.keyword"
            }
        }
    }
}

# What is use of keyword in the query
# text is analyzed, meaning it is broken up into distinct words when stored, 
#and allows for free-text searches on one or more words in the field. 
#The .keyword field takes the same input and keeps as one large string, 
#meaning it can be aggregated on, and you can use wildcard searches on it. 
#Aggregatable means you can use it in aggregations in elasticsearch, 
#which resembles a sql group by if you are familiar with that. 
#In Kibana you would probably use the .keyword field with aggregations 
#to count distinct values etc

# Find the average price of each car color
GET /cars/_search
{
   "size" : 0,
   "aggs": {
      "colors": {
         "terms": {
            "field": "color.keyword"
         },
         "aggs": {
            "avg_price": {
               "avg": {
                  "field": "price"
               }
            }
         }
      }
   }
}


# Nest a second bucket to determine top makes per color
GET /cars/_search
{
   "size" : 0,
   "aggs": {
      "colors": {
         "terms": {
            "field": "color.keyword"
         },
         "aggs": {
            "avg_price": {
               "avg": {
                  "field": "price"
               }
            },
            "make": {
                "terms": {
                    "field": "make.keyword"
                }
            }
         }
      }
   }
}


# Finally, add some extra metrics to determine min/max price per-make, per-color
GET /cars/_search
{
   "size" : 0,
   "aggs": {
      "colors": {
         "terms": {
            "field": "color.keyword"
         },
         "aggs": {
            "avg_price": { "avg": { "field": "price" }
            },
            "make" : {
                "terms" : {
                    "field" : "make.keyword"
                },
                "aggs" : {
                    "min_price" : { "min": { "field": "price"} },
                    "max_price" : { "max": { "field": "price"} } 
                }
            }
         }
      }
   }
}